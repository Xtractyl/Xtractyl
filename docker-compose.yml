services:
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - ROLLUP_USE_NODE_BUILTINS=${ROLLUP_USE_NODE_BUILTINS:-true}
    working_dir: /app

  postgres:
    image: ${POSTGRES_IMAGE:-postgres:15}
    container_name: ${POSTGRES_CONTAINER_NAME:-postgres}
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ${PGDATA_VOLUME:-pgdata}:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dbname}
      POSTGRES_USER: ${POSTGRES_USER:-username}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-yourpassword}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-username} -d ${POSTGRES_DB:-dbname}"]
      interval: 5s
      retries: 5
      timeout: 5s

  labelstudio:
    image: ${LABELSTUDIO_IMAGE:-heartexlabs/label-studio:latest}
    container_name: ${LABELSTUDIO_CONTAINER_NAME:-labelstudio}
    ports:
      - "${LABELSTUDIO_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ${LABELSTUDIO_DATA_VOLUME:-labelstudio_data}:/label-studio/data
    environment:
      - DJANGO_DB=${DJANGO_DB:-default}
      - POSTGRE_NAME=${POSTGRES_DB:-dbname}
      - POSTGRE_USER=${POSTGRES_USER:-username}
      - POSTGRE_PASSWORD=${POSTGRES_PASSWORD:-yourpassword}
      - POSTGRE_PORT=${POSTGRES_INTERNAL_PORT:-5432}
      - POSTGRE_HOST=${POSTGRES_SERVICE_NAME:-postgres}

  orchestrator:
    build:
      context: .
      dockerfile: docker/orchestrator/Dockerfile
    container_name: ${ORCH_CONTAINER_NAME:-orchestrator}
    depends_on:
      labelstudio:
        condition: service_started
      ml_backend:
        condition: service_healthy
    ports:
      - "${ORCH_PORT:-5001}:5001"
    volumes:
      - ${ORCH_APP_DIR:-./orchestrator}:/app
      - ${PROJECTS_DIR:-./data/projects}:/app/data/projects
      - ${HTMLS_DIR:-./data/htmls}:/app/data/htmls
      - ${EVAL_DIR:-./evaluation}:/app/evaluation
      - ${LOGS_DIR:-./logs}:/logs
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT:-5173}

  ml_backend:
    build:
      context: .
      dockerfile: docker/ml_backend/Dockerfile
    container_name: ${ML_BACKEND_CONTAINER_NAME:-ml_backend}
    ports:
      - "${ML_BACKEND_PORT:-6789}:${ML_BACKEND_INTERNAL_PORT:-6789}"
    depends_on:
      - labelstudio
      - ollama
    volumes:
      - ./ml_backend:/app
      - ${LOGS_DIR:-./logs}:/logs
    environment:
    - ML_BACKEND_PORT=${ML_BACKEND_PORT:-6789}
    - ML_BACKEND_INTERNAL_PORT=${ML_BACKEND_INTERNAL_PORT:-6789}
    - FRONTEND_PORT=${FRONTEND_PORT:-5173}
    - LABELSTUDIO_HOST=labelstudio        
    - LABELSTUDIO_PORT=${LABELSTUDIO_PORT:-8080}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ML_BACKEND_INTERNAL_PORT:-6789}/health"]
      interval: 10s
      timeout: 5s
      retries: 60

  ollama:
    image: ${OLLAMA_IMAGE:-ollama/ollama}
    container_name: ${OLLAMA_CONTAINER_NAME:-ollama}
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ${OLLAMA_MODELS_VOLUME:-ollama_models}:/root/.ollama

  docling:
    build:
      context: .
      dockerfile: docker/docling/Dockerfile
    container_name: ${DOCLING_CONTAINER_NAME:-docling}
    ports:
      - "${DOCLING_PORT:-5004}:${DOCLING_PORT:-5004}"
    volumes:
      - ${PDFS_DIR:-./data/pdfs}:/pdfs
      - ${DOC_HTMLS_DIR:-./data/htmls}:/htmls
      - ${LOGS_DIR:-./logs}:/logs
      - ${FONTCACHE_VOLUME:-fontcache}:/var/cache/fontconfig
      - ${XDG_CACHE_VOLUME:-xdg_cache}:/root/.cache
      - ${XDG_DATA_VOLUME:-xdg_data}:/root/.local/share
    environment:
      - XDG_CACHE_HOME=${XDG_CACHE_HOME:-/root/.cache}
      - XDG_DATA_HOME=${XDG_DATA_HOME:-/root/.local/share}
      - DOCLING_PORT=${DOCLING_PORT:-5004}
      - FRONTEND_PORT=${FRONTEND_PORT:-5173}
    command: ["sh", "-c", "flask run --host=0.0.0.0 --port=$DOCLING_PORT"]

  job_queue:
    image: redis:7
    container_name: ${JOB_QUEUE_CONTAINER_NAME:-job_queue}
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - ${REDIS_DATA_VOLUME:-redis_data}:/data
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  worker_prelabel:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: ${WORKER_PRELABEL_CONTAINER_NAME:-worker_prelabel}
    depends_on:
      job_queue:
        condition: service_healthy
      ml_backend:
        condition: service_started
    volumes:
      - ./worker:/app/worker
      - ${PROJECTS_DIR:-./data/projects}:/app/data/projects
      - ${HTMLS_DIR:-./data/htmls}:/app/data/htmls
      - ${LOGS_DIR:-./logs}:/logs
    environment:
      - REDIS_HOST=${REDIS_HOST:-job_queue}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - LS_HOST=labelstudio
      - LS_PORT=${LABELSTUDIO_PORT:-8080}
      - ML_BACKEND_HOST=ml_backend
      - ML_BACKEND_PORT=${ML_BACKEND_INTERNAL_PORT:-6789}
    command: ["python", "-m", "worker.prelabel_worker"]

volumes:
  labelstudio_data:
  pgdata:
  ollama_models:
  fontcache:
  xdg_cache:
  xdg_data:
  redis_data: