import json
import os
import requests
from dotenv import dotenv_values, load_dotenv, set_key

def create_project_main():
    logs = []

    load_dotenv()
    LABEL_STUDIO_URL = os.getenv("LABEL_STUDIO_URL", "http://labelstudio:8080")
    API_TOKEN = os.getenv("LABEL_STUDIO_API_TOKEN")

    PROJECT_NAME = "xtractyl_autogenerated_project"
    LABEL_CONFIG_TEMPLATE = """
    <View>
        <View style="padding: 0 1em; margin: 1em 0; background: #f1f1f1; position: sticky; top: 0; border-radius: 3px; z-index:100">
      <Labels name="label" toName="html">
        {labels}
      </Labels>
          </View>
      <HyperText name="html" value="$html"  granularity="symbol" />
    </View>
    """

    # 1. Lade Fragen + Labels
    with open("questions_and_labels.json", "r", encoding="utf-8") as f:
        qa = json.load(f)
    questions = qa["questions"]
    labels = qa["labels"]

    # 2. Baue XML-Label-Konfiguration
    label_tags = "\n    ".join([f'<Label value="{label}"/>' for label in labels])
    label_config = LABEL_CONFIG_TEMPLATE.format(labels=label_tags)

    # 3. Erstelle das Projekt via API
    headers = {"Authorization": f"Token {API_TOKEN}", "Content-Type": "application/json"}
    payload = {"title": PROJECT_NAME, "label_config": label_config}

    response = requests.post(f"{LABEL_STUDIO_URL}/api/projects", headers=headers, json=payload)

    if response.status_code != 201:
        error_msg = f"‚ùå Fehler beim Erstellen des Projekts: {response.text}"
        logs.append(error_msg)
        raise RuntimeError(error_msg)

    project_id = response.json()["id"]
    logs.append(f"‚úÖ Projekt {PROJECT_NAME} erstellt mit ID {project_id}")

    # 4. Speichere PROJECT_ID in .env
    env_path = ".env"
    set_key(env_path, "LABEL_STUDIO_PROJECT_ID", str(project_id), quote_mode="never")
    logs.append(f"üìÅ .env erfolgreich aktualisiert: LABEL_STUDIO_PROJECT_ID = {project_id}")

    # 5. Verkn√ºpfe ML Backend mit Projekt
    ml_backend_url = os.getenv("ML_BACKEND_URL", "http://ml_backend:6789")
    ml_payload = {"url": ml_backend_url, "title": "xtractyl-backend", "project": project_id}

    ml_response = requests.post(f"{LABEL_STUDIO_URL}/api/ml", headers=headers, json=ml_payload)

    if ml_response.status_code != 201:
        logs.append(f"‚ö†Ô∏è ML Backend konnte nicht verbunden werden: {ml_response.text}")
    else:
        logs.append("‚úÖ ML Backend erfolgreich zugewiesen.")

    return logs

def create_project_main_wrapper():
    return create_project_main()

if __name__ == "__main__":
    print("\n".join(create_project_main()))